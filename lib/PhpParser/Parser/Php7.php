<?php

namespace PhpParser\Parser;

use PhpParser\Error;
use PhpParser\Node;
use PhpParser\Node\Expr;
use PhpParser\Node\Name;
use PhpParser\Node\Scalar;
use PhpParser\Node\Stmt;

/* This is an automatically GENERATED file, which should not be manually edited.
 * Instead edit one of the following:
 *  * the grammar files grammar/php5.y or grammar/php7.y
 *  * the skeleton file grammar/parser.template
 *  * the preprocessing script grammar/rebuildParsers.php
 */
class Php7 extends \PhpParser\ParserAbstract
{
    protected $tokenToSymbolMapSize = 392;
    protected $actionTableSize = 1162;
    protected $gotoTableSize = 551;

    protected $invalidSymbol = 165;
    protected $errorSymbol = 1;
    protected $defaultAction = -32766;
    protected $unexpectedTokenRule = 32767;

    protected $YY2TBLSTATE = 395;
    protected $numNonLeafStates = 688;

    protected $symbolToName = array(
        "EOF",
        "error",
        "T_THROW",
        "T_INCLUDE",
        "T_INCLUDE_ONCE",
        "T_EVAL",
        "T_REQUIRE",
        "T_REQUIRE_ONCE",
        "','",
        "T_LOGICAL_OR",
        "T_LOGICAL_XOR",
        "T_LOGICAL_AND",
        "T_PRINT",
        "T_YIELD",
        "T_DOUBLE_ARROW",
        "T_YIELD_FROM",
        "'='",
        "T_PLUS_EQUAL",
        "T_MINUS_EQUAL",
        "T_MUL_EQUAL",
        "T_DIV_EQUAL",
        "T_CONCAT_EQUAL",
        "T_MOD_EQUAL",
        "T_AND_EQUAL",
        "T_OR_EQUAL",
        "T_XOR_EQUAL",
        "T_SL_EQUAL",
        "T_SR_EQUAL",
        "T_POW_EQUAL",
        "T_COALESCE_EQUAL",
        "'?'",
        "':'",
        "T_COALESCE",
        "T_BOOLEAN_OR",
        "T_BOOLEAN_AND",
        "'|'",
        "'^'",
        "'&'",
        "T_IS_EQUAL",
        "T_IS_NOT_EQUAL",
        "T_IS_IDENTICAL",
        "T_IS_NOT_IDENTICAL",
        "T_SPACESHIP",
        "'<'",
        "T_IS_SMALLER_OR_EQUAL",
        "'>'",
        "T_IS_GREATER_OR_EQUAL",
        "T_SL",
        "T_SR",
        "'+'",
        "'-'",
        "'.'",
        "'*'",
        "'/'",
        "'%'",
        "'!'",
        "T_INSTANCEOF",
        "'~'",
        "T_INC",
        "T_DEC",
        "T_INT_CAST",
        "T_DOUBLE_CAST",
        "T_STRING_CAST",
        "T_ARRAY_CAST",
        "T_OBJECT_CAST",
        "T_BOOL_CAST",
        "T_UNSET_CAST",
        "'@'",
        "T_POW",
        "'['",
        "T_NEW",
        "T_CLONE",
        "T_EXIT",
        "T_IF",
        "T_ELSEIF",
        "T_ELSE",
        "T_ENDIF",
        "T_LNUMBER",
        "T_DNUMBER",
        "T_STRING",
        "T_STRING_VARNAME",
        "T_VARIABLE",
        "T_NUM_STRING",
        "T_INLINE_HTML",
        "T_ENCAPSED_AND_WHITESPACE",
        "T_CONSTANT_ENCAPSED_STRING",
        "T_ECHO",
        "T_DO",
        "T_WHILE",
        "T_ENDWHILE",
        "T_FOR",
        "T_ENDFOR",
        "T_FOREACH",
        "T_ENDFOREACH",
        "T_DECLARE",
        "T_ENDDECLARE",
        "T_AS",
        "T_SWITCH",
        "T_MATCH",
        "T_ENDSWITCH",
        "T_CASE",
        "T_DEFAULT",
        "T_BREAK",
        "T_CONTINUE",
        "T_GOTO",
        "T_FUNCTION",
        "T_FN",
        "T_CONST",
        "T_RETURN",
        "T_TRY",
        "T_CATCH",
        "T_FINALLY",
        "T_USE",
        "T_INSTEADOF",
        "T_GLOBAL",
        "T_STATIC",
        "T_ABSTRACT",
        "T_FINAL",
        "T_PRIVATE",
        "T_PROTECTED",
        "T_PUBLIC",
        "T_VAR",
        "T_UNSET",
        "T_ISSET",
        "T_EMPTY",
        "T_HALT_COMPILER",
        "T_CLASS",
        "T_TRAIT",
        "T_INTERFACE",
        "T_EXTENDS",
        "T_IMPLEMENTS",
        "T_OBJECT_OPERATOR",
        "T_NULLSAFE_OBJECT_OPERATOR",
        "T_LIST",
        "T_ARRAY",
        "T_CALLABLE",
        "T_CLASS_C",
        "T_TRAIT_C",
        "T_METHOD_C",
        "T_FUNC_C",
        "T_LINE",
        "T_FILE",
        "T_START_HEREDOC",
        "T_END_HEREDOC",
        "T_DOLLAR_OPEN_CURLY_BRACES",
        "T_CURLY_OPEN",
        "T_PAAMAYIM_NEKUDOTAYIM",
        "T_NAMESPACE",
        "T_NS_C",
        "T_DIR",
        "T_NS_SEPARATOR",
        "T_ELLIPSIS",
        "T_NAME_FULLY_QUALIFIED",
        "T_NAME_QUALIFIED",
        "T_NAME_RELATIVE",
        "T_ATTRIBUTE",
        "';'",
        "']'",
        "'{'",
        "'}'",
        "'('",
        "')'",
        "'`'",
        "'\"'",
        "'$'"
    );

    protected $tokenToSymbol = array(
            0,  165,  165,  165,  165,  165,  165,  165,  165,  165,
          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
          165,  165,  165,   55,  163,  165,  164,   54,   37,  165,
          160,  161,   52,   49,    8,   50,   51,   53,  165,  165,
          165,  165,  165,  165,  165,  165,  165,  165,   31,  156,
           43,   16,   45,   30,   67,  165,  165,  165,  165,  165,
          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
          165,   69,  165,  157,   36,  165,  162,  165,  165,  165,
          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
          165,  165,  165,  158,   35,  159,   57,  165,  165,  165,
          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
          165,  165,  165,  165,  165,  165,    1,    2,    3,    4,
            5,    6,    7,    9,   10,   11,   12,   13,   14,   15,
           17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
           27,   28,   29,   32,   33,   34,   38,   39,   40,   41,
           42,   44,   46,   47,   48,   56,   58,   59,   60,   61,
           62,   63,   64,   65,   66,   68,   70,   71,   72,   73,
           74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
           84,   85,   86,   87,   88,   89,   90,   91,   92,   93,
           94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
          104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
          114,  115,  116,  117,  118,  119,  120,  121,  122,  123,
          124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
          134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
          144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
          154,  155
    );

    protected $action = array(
          130,  131,  132,  550,  133,  134,    0,  698,  699,  700,
          135,   36, 1214,  526,  527,-32766,  885,-32766,-32766,-32766,
         -553, 1147,  772,  891,  428,  429, 1234, -553,-32766,-32766,
        -32766, -295,-32766, 1233,-32766,  245,-32766, -191,-32766,-32766,
        -32766,-32766,-32766,  456,-32766,-32766,-32766,-32766,-32766,-32766,
        -32766,-32766,  124,  922,  701,  957,-32766,  386, 1026, 1027,
         1028, 1025, 1024, 1023,-32766,  426,  427,    2,  261,  136,
          372,  705,  706,  707,  708,  389,  783,  395, 1026, 1027,
         1028, 1025, 1024, 1023,  709,  710,  711,  712,  713,  714,
          715,  716,  717,  718,  719,  739,  551,  740,  741,  742,
          743,  731,  732,  373,  374,  734,  735,  720,  721,  722,
          724,  725,  726,  333,  765,  766,  767,  768,  769,  727,
          728,  552,  553,  760,  751,  749,  750,  746,  747, -190,
           19,  554,  555,  745,  556,  557,  558,  559,  560,  561,
         -544, -550,  777, -504, -544,  748,  562,  563, -550,  137,
        -32766,-32766,-32766,  130,  131,  132,  550,  133,  134,  978,
          698,  699,  700,  135,   36,-32766,-32766,-32766,-32766,   80,
        -32766,-32766,-32766,  675, 1147,  542, -553,   31,  923,  578,
         -553,-32766,-32766,-32766, -295,-32766,-32766,-32766,  245,-32766,
         -191,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,
          954,  953,  952,-32766,-32766, -504, -504,  701, 1259,-32766,
          386, 1260,-32766,-32766,-32766,  235,  778,-32766,  431,  427,
         -504,  261,  136,  372,  705,  706,  707,  708,  389,  126,
          395,  782, -504,-32766, -510,-32766,-32766,  709,  710,  711,
          712,  713,  714,  715,  716,  717,  718,  719,  739,  551,
          740,  741,  742,  743,  731,  732,  373,  374,  734,  735,
          720,  721,  722,  724,  725,  726,  333,  765,  766,  767,
          768,  769,  727,  728,  552,  553,  760,  751,  749,  750,
          746,  747, -190,  -82,  554,  555,  745,  556,  557,  558,
          559,  560,  561,  309,   81,   82,   83, -550,  748,  562,
          563, -550,  137,  723,  693,  694,  695,  696,  697,-32766,
          698,  699,  700,  736,  737,   33,  142,   84,   85,   86,
           87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
           97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
          247,  263,-32766,-32766,-32766,  104,  105,  106,  -82,  263,
         1211,  292,  572,  107,  294,  436,  437,  701,-32766,-32766,
        -32766,  107, -255,-32766,  307,-32766,-32766,-32766,-32766,-32766,
        -32766,  702,  703,  704,  705,  706,  707,  708,  450,-32766,
          770,-32766,-32766,-32766,-32766,-32766,  322,  709,  710,  711,
          712,  713,  714,  715,  716,  717,  718,  719,  739,  762,
          740,  741,  742,  743,  731,  732,  733,  761,  734,  735,
          720,  721,  722,  724,  725,  726,  764,  765,  766,  767,
          768,  769,  727,  728,  729,  730,  760,  751,  749,  750,
          746,  747,  522,  311,  738,  744,  745,  752,  753,  755,
          754,  756,  757,  147,-32766,-32766,-32766,  234,  748,  759,
          758,   48,   49,   50,  481,   51,   52, -332,  395, -332,
          346,   53,   54,  350,   55,-32766,  977,-32766,-32766,-32766,
        -32766,-32766,-32766,-32767,-32767,-32767,-32767,-32767,  867,-32767,
        -32767,-32767,-32767,   99,  100,  101,  102,  103,-32766,-32766,
         1174, 1186,  355, 1147,  867,  271,  357, 1230,   56,   57,
          476,  810,   18,  811,   58,  451,   59,  240,  241,   60,
           61,   62,   63,   64,   65,   66,   67,  406,   26,  262,
           68,  410,  482,  407,  667,-32766, 1180, 1181,  483, 1145,
         1211, 1149, 1148, 1150, 1178,   40,   23,  484, 1004,  485,
         1003,  486,  686,  487,  964,  965,  488,  489,  780,  617,
           24,   42,   43,  411,  415,  413,  867,   44,  490,  810,
          857,  811,  248,  345,  321, 1154, 1149, 1148, 1150,  408,
         1211,  491,  492,  493,  409,  772,  857,  632,  633, -507,
          962,  148,  494,  495,  150, 1168, 1169, 1170, 1171, 1165,
         1166,  280,  146,  377,   26,  -14,  787, 1172, 1167,  964,
          965, 1149, 1148, 1150,  281,  151, 1211, -503,  152,   69,
         1178,  305,  306,  311,   34,  108,  109,  110,  111,  112,
          113,  114,  115,  116,  117,  118,  119,  120,  154, -151,
         -151, -151,  121,  869,   35,  662, 1154, 1154,  857,  421,
          422, -507, -507,  122, -151, 1211, -151,  138, -151,  869,
         -151,  662,  -84,  311,  139,  242, 1062, 1064,  494,  495,
          412, 1168, 1169, 1170, 1171, 1165, 1166, -502, -507, -503,
         -503, -109, -109, 1172, 1167, -505,  127,  867,  438,  439,
          843, -109, -109, -109, -503,   71,  609,  610,  306,  311,
         -109,-32766,  -76,  128,  -49,  141, -503, 1147, -509,  155,
          156,  774,  157,  -73,-32766,-32766,-32766,  668,-32766,  -71,
        -32766,  869,-32766,  662, -151,-32766, 1211, 1211,  -70,  281,
        -32766,-32766,-32766,  -69,   73,  -68,-32766,-32766,  311, -502,
         -502,  129,-32766,  386,  -67,  -66,-32766, -505, -505,  -65,
        -32766,  -64, 1147,  -45, -502,  -16,  867,  145,  274,-32766,
        -32766,-32766, -505,-32766,  264,-32766, -502,-32766,  676,  857,
        -32766,  679, -109,  866, -505,-32766,-32766,-32766,  144,   72,
          244,-32766,-32766,-32766,  272,  776,  669,-32766,  386, 1147,
          664,  867, -502,  273,  275,-32766,-32766,-32766,-32766,  276,
        -32766,  281,-32766,  315,-32766,   73,   73,-32766,  881,  311,
          311,  640,-32766,-32766,-32766,  143,-32766,  246,-32766,-32766,
          107,  671, 1147,  263,-32766,  386,   -4,  867,-32766,-32766,
        -32766,-32766,-32766,-32766,  781,-32766,  772,-32766,  857,  530,
        -32766,  867,  869,-32766,  662,-32766,-32766,-32766, 1261,  524,
          867,-32766,-32766,-32766, -502, -502, 1032,-32766,  386, 1147,
          655,  618,  964,  965,  405,-32766,-32766,-32766,-32766, -502,
        -32766,  962,-32766,  857,-32766,  635,  867,-32766,  623,  282,
          677, -502,-32766,-32766,-32766,   20,-32766,  433,-32766,-32766,
          964,  965, 1147,  461,-32766,  386,  101,  102,  103,-32766,
        -32766,-32766,-32766,-32766,  624,-32766,  636,-32766,   46,  857,
        -32766,  908,  607,  662,  285,-32766,-32766,-32766,-32766, 1018,
          892,-32766,-32766,  857,  293,  893,  781,-32766,  386, 1249,
         1185,  412,  857,  400,  283,-32766, 1187,  883,  279, -233,
         -233, -233, -109, -109, 1002,  412,  869,   26,  662, 1175,
         -472,  802, -109, -109, -109, -468, -109, -109,  857, 1211,
           47, -458,    8, 1178,   22,  843, -109, -109, -109,  348,
          288,  289,  536,    9, -232, -232, -232,  576,  794,  281,
          412,  780,  869,   30,  662,   -4,   38,   39,  683,   32,
          243, -109, -109,  684,  848,  680,  869,  123,  662, -233,
          843, -109, -109, -109,  932,  869,  909,  662,  916,  906,
          917,  846,  495,  998, 1168, 1169, 1170, 1171, 1165, 1166,
          999,  904,  290,  291, 1007, 1010, 1172, 1167, 1011, 1008,
         1009,  869, 1015,  662, -232,  304, 1200,  349,   71, 1218,
         1252,  306,  311,  612,  844,  347,  663,  666, -109,  125,
         -109,  670,  672,  673,  674,  284,  678,  665, -109, -109,
         -109, -109, -109, -109, -109, 1256, 1258,  805,  804,  813,
          890,  924,  812, 1257,  889,  888, 1133,  876,  884,  874,
          914,  915, 1255, 1212, 1201, 1219, 1225, 1228,    0, -538,
         -536, -510, -509, -508,    1,   27,   28,   37,   41,   45,
           70,   74, -309, -258,   75,   76,   77,   78,   79,  140,
          149,  153,  239,  310,  334,  335,  336,  337,  338,  339,
          340,  341,  342,  343,  344,  401,  402,    0, -256, -255,
           12,   13,   14,   15,   17,  376,  452,  453,  460,  463,
          464,  465,  466,  470,  471,  472,  479,  649, 1158, 1101,
         1176,  979, 1137, -260,  -99,   11,   16,   25,  278,  375,
          569,  573,  599,  654, 1105, 1153, 1102, 1231,    0, 1118,
            0, 1179
    );

    protected $actionCheck = array(
            2,    3,    4,    5,    6,    7,    0,    9,   10,   11,
           12,   13,    1,  116,  117,   73,    1,    9,   10,   11,
            1,   79,   79,  126,  127,  128,    1,    8,   86,   87,
           88,    8,   90,    8,   92,   37,   94,    8,   30,   97,
           32,   33,   34,  101,  102,  103,  104,    9,   10,   11,
          108,  109,   14,   31,   56,    1,  114,  115,  115,  116,
          117,  118,  119,  120,  122,  105,  106,    8,   70,   71,
           72,   73,   74,   75,   76,  115,    1,   79,  115,  116,
          117,  118,  119,  120,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
          122,  123,  124,  125,  126,  127,  128,  129,  130,    8,
            8,  133,  134,  135,  136,  137,  138,  139,  140,  141,
          157,    1,   79,   69,  161,  147,  148,  149,    8,  151,
            9,   10,   11,    2,    3,    4,    5,    6,    7,  161,
            9,   10,   11,   12,   13,    9,   10,   11,   73,  158,
            9,   10,   11,  158,   79,   80,  157,    8,  156,   50,
          161,   86,   87,   88,  161,   90,   30,   92,   37,   94,
          161,   30,   97,   32,   33,   34,   35,  102,  103,  104,
          118,  119,  120,  108,  109,  131,  132,   56,   79,  114,
          115,   82,    9,   10,   11,   14,  153,  122,  105,  106,
          146,   70,   71,   72,   73,   74,   75,   76,  115,    8,
           79,  156,  158,   30,  160,   32,   33,   86,   87,   88,
           89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
           99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
          109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
          119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
          129,  130,  161,   31,  133,  134,  135,  136,  137,  138,
          139,  140,  141,   69,    9,   10,   11,  157,  147,  148,
          149,  161,  151,    2,    3,    4,    5,    6,    7,    9,
            9,   10,   11,   12,   13,   30,    8,   32,   33,   34,
           35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
           45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
            8,   56,    9,   10,   11,   52,   53,   54,   96,   56,
           81,    8,    1,   68,    8,  131,  132,   56,    9,   10,
           11,   68,  161,   30,    8,   32,   33,   34,   35,   36,
           37,   70,   71,   72,   73,   74,   75,   76,   31,   30,
           79,   32,   33,   34,   35,   36,    8,   86,   87,   88,
           89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
           99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
          109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
          119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
          129,  130,   84,  164,  133,  134,  135,  136,  137,  138,
          139,  140,  141,   14,    9,   10,   11,   96,  147,  148,
          149,    2,    3,    4,    5,    6,    7,  105,   79,  107,
            8,   12,   13,    8,   15,   30,    1,   32,   33,   34,
           35,   36,   37,   38,   39,   40,   41,   42,    1,   43,
           44,   45,   46,   47,   48,   49,   50,   51,    9,   10,
            1,  143,    8,   79,    1,   30,    8,    1,   49,   50,
          105,  105,  107,  107,   55,  158,   57,   58,   59,   60,
           61,   62,   63,   64,   65,   66,   67,    8,   69,   70,
           71,   72,   73,    8,   31,  115,   77,   78,   79,  115,
           81,  152,  153,  154,   85,   86,   87,   88,  159,   90,
          156,   92,  158,   94,  134,  135,   97,   98,  152,   74,
           75,  102,  103,  104,  105,  106,    1,  108,  109,  105,
           83,  107,   37,  114,  115,    1,  152,  153,  154,    8,
           81,  122,  123,  124,    8,   79,   83,   74,   75,   69,
          115,   14,  133,  134,   14,  136,  137,  138,  139,  140,
          141,  142,  100,  101,   69,   31,    8,  148,  149,  134,
          135,  152,  153,  154,  155,   14,   81,   69,   14,  160,
           85,  162,  163,  164,   16,   17,   18,   19,   20,   21,
           22,   23,   24,   25,   26,   27,   28,   29,   14,   74,
           75,   76,   16,  156,   14,  158,    1,    1,   83,  105,
          106,  131,  132,   16,   89,   81,   91,  158,   93,  156,
           95,  158,   31,  164,  158,   37,   58,   59,  133,  134,
          105,  136,  137,  138,  139,  140,  141,   69,  158,  131,
          132,  116,  117,  148,  149,   69,   16,    1,  105,  106,
          125,  126,  127,  128,  146,  160,  110,  111,  163,  164,
          126,   73,   31,   16,   31,   16,  158,   79,  160,   16,
           16,   79,   16,   31,   86,   87,   88,   31,   90,   31,
           92,  156,   94,  158,  159,   97,   81,   81,   31,  155,
          102,  103,  104,   31,  160,   31,  108,  109,  164,  131,
          132,   31,  114,  115,   31,   31,   73,  131,  132,   31,
          122,   31,   79,   31,  146,   31,    1,   31,   30,   86,
           87,   88,  146,   90,   31,   92,  158,   94,   31,   83,
           97,   31,  126,   31,  158,  102,  103,  104,   31,  151,
           37,  108,  109,   73,   35,  153,   31,  114,  115,   79,
          158,    1,   69,   35,   35,  122,   86,   87,   88,   35,
           90,  155,   92,   35,   94,  160,  160,   97,   37,  164,
          164,   76,  102,  103,  104,   69,   73,   37,  108,  109,
           68,   31,   79,   56,  114,  115,    0,    1,   84,   86,
           87,   88,  122,   90,   81,   92,   79,   94,   83,   88,
           97,    1,  156,  115,  158,  102,  103,  104,   82,   84,
            1,  108,  109,   73,  131,  132,   81,  114,  115,   79,
           91,   89,  134,  135,  126,  122,   86,   87,   88,  146,
           90,  115,   92,   83,   94,   93,    1,   97,   95,  129,
           31,  158,  102,  103,  104,   96,   73,   96,  108,  109,
          134,  135,   79,   96,  114,  115,   49,   50,   51,   86,
           87,   88,  122,   90,   99,   92,   99,   94,   69,   83,
           97,  156,  112,  158,  113,  102,  103,  104,  115,  121,
          126,  108,  109,   83,  129,  126,   81,  114,  115,   84,
          143,  105,   83,  107,  130,  122,  143,  151,  112,   99,
          100,  101,  116,  117,    1,  105,  156,   69,  158,  157,
          162,  125,  126,  127,  128,  146,  116,  117,   83,   81,
           69,  146,  146,   85,  146,  125,  126,  127,  128,  146,
          131,  132,  150,  147,   99,  100,  101,  150,  157,  155,
          105,  152,  156,  158,  158,  159,  156,  156,  156,  144,
          145,  116,  117,  156,  156,  159,  156,  158,  158,  159,
          125,  126,  127,  128,  156,  156,  156,  158,  156,  156,
          156,  156,  134,  156,  136,  137,  138,  139,  140,  141,
          156,  156,  131,  132,  156,  156,  148,  149,  156,  156,
          156,  156,  156,  158,  159,  158,  157,  146,  160,  157,
          157,  163,  164,  157,  159,  158,  158,  158,  105,  158,
          107,  158,  158,  158,  158,  112,  158,  158,  115,  116,
          117,  118,  119,  120,  121,  159,  159,  159,  159,  159,
          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
          159,  159,  159,  159,  159,  159,  159,  159,   -1,  160,
          160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
          160,  160,  159,  161,  160,  160,  160,  160,  160,  160,
          160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
          160,  160,  160,  160,  160,  160,  160,   -1,  161,  161,
          161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
          161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
          161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
          161,  161,  161,  161,  161,  161,  161,  161,   -1,  162,
           -1,  163
    );

    protected $actionBase = array(
            0,   -2,  151,  555,  816,  830,  865,  379,  489,  622,
          864,  676,  780,  780,  839,  780,  493,  745,  301,  301,
          -57,  301,  301,  477,  477,  477,  618,  618,  618,  618,
          -58,  -58,   95,  700,  733,  770,  663,  803,  803,  803,
          803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
          803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
          803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
          803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
          803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
          803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
          803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
          803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
          803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
          803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
          803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
          803,  803,  803,  803,  803,  803,  803,  803,   75,   22,
          351,  620,  987,  993,  989,  994,  985,  984,  988,  990,
          995,  913,  914,  737,  915,  916,  917,  918,  991,  876,
          986,  992,  285,  285,  285,  285,  285,  285,  285,  285,
          285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
          285,  285,  285,  300,   38,  479,  141,  141,  141,  141,
          141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
          141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
          156,  156,  156,  203,  525,  525,    8,  598,  161,  868,
          868,  868,  868,  868,  868,  868,  868,  868,  868,  349,
          333,  435,  435,  435,  435,  435,  436,  436,  436,  436,
          933,  564,  636,  635,  465,  352,  837,  837,  718,  718,
          788,  746,  746,  746,  410,  410,  410,   74,  538,  396,
          348,  414,  414,  414,  414,  414,  783,  998,  496,  496,
          496,  496,  414,  414,  414, -103,  606,  713,  713,  881,
          293,  293,  293,  713,  454,  755,  835,  454,  835,  129,
          793,   11,  -40,  113,  -17,  793,  510,  829,  140,   19,
          819,  534,  819,  734,  866,  889,  996,   82,  795,  911,
          797,  912,  224,  661,  982,  982,  982,  982,  982,  982,
          982,  982,  982,  982,  982,  269,  983,   63,  269,  269,
          269,  576,   63,  475,  503,   63,  758,  983,   75,  805,
           75,   75,   75,   75,  944,   75,   75,   75,   75,   75,
           75,  949,  714,  712,  672,  347,   75,   22,   15,   15,
          384,   54,   15,   15,   15,   15,  534,  757,  812,  573,
          817,  121,  757,  757,  757,  252,   23,  201,   29,  395,
          747,  747,  761,  765,  924,  924,  747,  743,  747,  765,
          929,  747,  761,  761,  924,  761,  814,  221,  509,  378,
          455,  761,  761,  515,  924,  343,  761,  761,  747,  747,
          747,  761,  561,  747,  332,  308,  747,  747,  761,  761,
          740,  785,   59,  924,  924,  924,  785,  452,  794,  794,
          822,  827,  790,  723,  356,  346,  588,  169,  761,  723,
          723,  747,  484,  790,  723,  790,  723,  776,  723,  723,
          723,  790,  723,  743,  488,  723,  761,  566,  122,  723,
            6,  930,  931,  621,  934,  927,  935,  955,  936,  937,
          878,  942,  928,  938,  926,  925,  732,  616,  627,  806,
          799,  923,  742,  742,  742,  921,  742,  742,  742,  742,
          742,  742,  742,  742,  616,  782,  813,  728,  741,  945,
          660,  677,  777,  875,  778,  997,  784,  789,  944,  977,
          939,  820,  679,  963,  946,  826,  867,  947,  948,  964,
          978,  979,  896,  736,  897,  898,  811,  742,  950,  879,
          930,  937,  928,  938,  926,  925,  710,  708,  703,  704,
          694,  692,  678,  687,  716,  920,  919,  869,  949,  922,
          616,  872,  959,  815,  965,  966,  877,  781,  756,  873,
          899,  951,  952,  953,  883,  980,  821,  960,  932,  967,
          787,  900,  968,  969,  970,  971,  901,  884,  885,  828,
          762,  957,  773,  902,  429,  749,  754,  956,  567,  943,
          886,  903,  904,  972,  973,  974,  905,  940,  838,  961,
          772,  962,  958,  840,  842,  570,  739,  748,  591,  594,
          906,  907,  941,  727,  725,  843,  844,  981,  908,  614,
          845,  683,  909,  976,  847,  684,  686,  854,  759,  888,
          808,  791,  779,  954,  730,  855,  910,  858,  859,  862,
          975,  863,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,  449,
          449,  449,  449,  449,  449,  301,  301,  301,  301,  449,
          449,  449,  449,  449,  449,  449,    0,    0,  301,    0,
            0,  449,  449,  449,  449,  449,  449,  449,  449,  449,
          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
          449,  449,  449,  449,  449,  449,  285,  285,  285,  285,
          285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
          285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,  285,  285,  285,  285,  285,  285,  285,  285,  285,
          285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
          285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
          285,  285,  414,  414,  285,    0,  285,  414,  414,  414,
          414,  414,  414,  414,  414,  414,  414,  285,  285,  285,
          285,  285,  285,  285,  293,  293,  293,  293,  814,  414,
          414,  414,  414,  -37,  293,  293,  414,  414,  -37,  414,
          414,  414,  414,  414,  414,    0,    0,   63,  835,    0,
            0,    0,    0,    0,  835,  835,  269,  269,  269,  269,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,   63,  835,    0,   63,    0,  743,  414,  269,
          814,  814,   25,  414,    0,    0,    0,    0,   63,  743,
           63,  835,   15,   75,   25,    0,  492,  492,  492,  492,
            0,  534,  814,  814,  814,  814,  814,  814,  814,  814,
          814,  814,  814,    0,  814,    0,    0,    0,    0,    0,
            0,    0,    0,    0,  743,  761,    0,  924,    0,    0,
            0,    0,  747,    0,    0,    0,    0,    0,    0,  747,
          929,  761,  761,    0,    0,    0,    0,    0,    0,  743,
            0,    0,    0,    0,    0,  742,  781,    0,  781,    0,
          742,  742,  742
    );

    protected $actionDefault = array(
            3,32767,   99,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,   97,
        32767,32767,32767,32767,32767,32767,  556,  556,  556,  556,
          237,   99,32767,32767,32767,32767,  432,  351,  351,  351,
        32767,32767,  500,  500,  500,  500,  500,  500,32767,32767,
        32767,32767,32767,32767,  432,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,   97,32767,32767,32767,
           35,    5,    6,    8,    9,   48,   15,32767,32767,32767,
        32767,32767,   99,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  549,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  436,  415,  416,  418,  419,  350,  501,  555,
          294,  552,  349,  144,  306,  296,  225,  297,  241,  242,
          268,  346,  148,  380,  433,  382,  431,  435,  381,  356,
          361,  362,  363,  364,  365,  366,  367,  368,  369,  370,
          371,  372,  373,  354,  355,  434,  437,  438,  441,  442,
          412,  411,  410,  378,32767,32767,  379,  353,  383,32767,
        32767,32767,32767,32767,32767,32767,32767,   99,32767,  385,
          384,  401,  402,  399,  400,  403,  404,  405,  406,  407,
        32767,32767,32767,32767,32767,  329,  392,  393,  285,  285,
          331,32767,32767,32767,32767,32767,32767,  494,  409,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,   99,32767,   97,32767,  496,  375,  377,  464,
          387,  388,  386,  357,32767,  471,32767,   99,  473,32767,
        32767,32767,  110,32767,32767,32767,  495,32767,  502,  502,
        32767,  457,   97,32767,32767,32767,32767,  263,32767,32767,
        32767,32767,  563,  457,  109,  109,  109,  109,  109,  109,
          109,  109,  109,  109,  109,32767,  109,32767,32767,32767,
           97,  187,32767,  251,  253,   99,  517,  192,32767,  476,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  469,  192,  192,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,  457,  397,  137,32767,
          137,  502,  389,  390,  391,  459,  502,  502,  502,32767,
        32767,32767,  192,32767,  474,  474,   97,   97,   97,   97,
          469,32767,  192,  192,32767,  192,  110,   96,   96,   96,
           96,  192,  192,   96,  102,   98,  192,  192,32767,32767,
        32767,  192,   96,32767,   98,   98,32767,32767,  192,  192,
          208,  206,   98,32767,  521,  522,  206,   98,  210,  210,
          230,  230,  448,  287,   98,   96,   98,   98,  192,  287,
          287,32767,   98,  448,  287,  448,  287,  194,  287,  287,
          287,  448,  287,32767,   98,  287,  192,   96,   96,  287,
        32767,32767,32767,  459,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,  489,32767,
          506,  519,  395,  396,  398,  504,  420,  421,  422,  423,
          424,  425,  426,  428,  551,32767,  463,32767,32767,32767,
        32767,  305,  561,32767,  561,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  562,32767,  502,32767,32767,  394,32767,32767,
            7,   74,   41,   42,   50,   56,  480,  481,  482,  483,
          477,  478,  484,  479,32767,  485,  527,32767,32767,  503,
          554,32767,32767,32767,32767,32767,32767,  137,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,  489,32767,
          135,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  502,32767,32767,32767,  282,  284,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  502,32767,32767,32767,  270,  272,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  267,32767,32767,32767,  345,32767,32767,32767,32767,
        32767,  325,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  150,  150,    3,    3,  308,  150,  150,  150,
          308,  150,  308,  308,  150,  150,  150,  150,  150,  150,
          182,  245,  248,  230,  230,  150,  317,  150
    );

    protected $goto = array(
          190,  190,  650,  981,  658,  397,  622,  959,  966,  967,
          391,  297,  298,  318,  544,  303,  396,  319,  398,  601,
          362,  366,  529,  567,  571,  161,  161,  161,  161,  187,
          187,  171,  173,  209,  191,  204,  187,  187,  187,  187,
          187,  188,  188,  188,  188,  188,  188,  182,  183,  184,
          185,  186,  206,  204,  207,  502,  503,  387,  504,  506,
          507,  508,  509,  510,  511,  512,  513, 1048,  162,  163,
          164,  189,  165,  166,  167,  160,  168,  169,  170,  172,
          203,  205,  208,  230,  233,  236,  238,  249,  250,  251,
          252,  253,  254,  255,  256,  257,  258,  259,  266,  267,
          300,  301,  302,  392,  393,  394,  547,  210,  211,  212,
          213,  214,  215,  216,  217,  218,  219,  220,  221,  222,
          223,  224,  174,  225,  175,  192,  193,  194,  231,  182,
          183,  184,  185,  186,  206, 1048,  195,  176,  177,  178,
          196,  192,  179,  232,  197,  159,  198,  226,  180,  199,
          227,  228,  181,  229,  200,  201,  202,  528,  519, 1022,
          800,  796,  796,  775, 1021,  312,  312,  312,  312,  588,
          588,  860,  566,  861, 1177, 1177, 1177, 1177, 1177, 1177,
         1177, 1177, 1177, 1177,  907,  514,  514,  514,  514,  390,
          816,  577,  803,  801,  570,  828,  364,  519,  815,  528,
          295,  295,  295,  295,  834,  537,  538,  329,  586,  619,
          371,  548, 1127,  886,  773,  568, 1128, 1131,  887, 1132,
          435,  435,  582,  583,    5,  808,    6,  856,  851,  852,
          865,  435,  809,  853,  806,  854,  855,  807,  541, 1195,
         1195,  779,  467,  859, 1195, 1195, 1195, 1195, 1195, 1195,
         1195, 1195, 1195, 1195,  308,  287, 1146, 1146, 1146,  963,
           21, 1246, 1246,  963,  963,  796,  963,  963,  963,  963,
          963,  963, 1227, 1227, 1227, 1227, 1146, 1146, 1146, 1146,
         1146,  326,  779, 1246,  779, 1193, 1193, 1146, 1146, 1146,
         1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
         1235,  516,  516,  516,  928,  872,  505,  505, 1222, 1223,
          873,  505,  505,  505,  505,  505,  505,  505,  505,  505,
          505,  424,  901,  901,  901,  901,  545,  580, 1245, 1245,
          360,  535,  424,  895,  902,  682,  600,  602,  540,  620,
         1096,  621,  638,  642,  942,  648,  656,  938,  534,  799,
         1245,  616,  403,  630,  631,  581,  931,  905,  905,  903,
          905,  681, 1262,  320,  821, 1248,  378,  379,  518,  940,
          935,  628,  793,  629,  521,  382,  383,  384,  370,  639,
          950,  468,  385,  469,  520,  532,  324,  818,  987,  475,
          520,  685,  532,  945,  945,  363,  575,  589,  592,  593,
          594,  595,  613,  614,  615,  660,  899,  380,  657, 1206,
         1139,  446,  549,  440,  441,  830, 1031,  826,  991,  449,
         1253, 1254,  416,  416,  416, 1217, 1217, 1217,  877, 1036,
          829,  817,  986,  912,  641,  990,  585,  598,    0,  330,
          331,  947,    0,    0,  910,  824,    0,    0,  820,    0,
          625,  926, 1229, 1229, 1229, 1229,  814,  270,  517,  517,
          521,    0, 1014,  565, 1142,  661,    0,  900, 1138,  445,
         1220, 1221,    0,  646,  646, 1213,  653, 1012,  605,  605,
            0,    0,    0,    0,  971,  968,  969,    0,    0, 1029,
          833,    0,    0,    0,    0,    0,  416,  416,  416,  416,
          416,  416,  416,  416,  416,  416,  416,    0,  416,  989,
            0,    0, 1215, 1215,  989,    0,    0,    0,    0, 1143,
            0,    0,    0,    0,    0,    0, 1141,    0,    0,  791,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0, 1144, 1203,
         1204
    );

    protected $gotoCheck = array(
           18,   18,   72,  112,    8,   65,   65,  106,  106,  106,
           65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
           58,   58,   58,   58,   58,   18,   18,   18,   18,   18,
           18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
           18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
           18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
           18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
           18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
           18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
           18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
           18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
           18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
           18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
           18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
           18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
           18,   18,   18,   18,   18,   18,   18,   75,   75,  129,
           27,   23,   23,    6,  129,   24,   24,   24,   24,  100,
          100,   64,  115,   64,  100,  100,  100,  100,  100,  100,
          100,  100,  100,  100,   49,   99,   99,   99,   99,   12,
           36,   12,   14,   28,   99,   36,   75,   75,   36,   75,
           25,   25,   25,   25,   45,   75,   75,   89,   55,   55,
           75,   75,   77,   77,    5,   75,   77,   77,   77,   77,
          134,  134,   75,   75,   46,   14,   46,   14,   14,   14,
           14,  134,   14,   14,   14,   14,   14,   14,  155,  153,
          153,   11,   75,   14,  153,  153,  153,  153,  153,  153,
          153,  153,  153,  153,  152,  152,   72,   72,   72,   72,
           75,  166,  166,   72,   72,   23,   72,   72,   72,   72,
           72,   72,    8,    8,    8,    8,   72,   72,   72,   72,
           72,  162,   11,  166,   11,  154,  154,   72,   72,   72,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          164,   20,   20,   20,   95,   72,  156,  156,  161,  161,
           72,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,   20,   20,   20,   20,   20,    2,    2,  165,  165,
           61,   48,   20,   20,   20,   48,   48,   48,   96,   48,
          136,   63,   48,   48,   48,   48,   48,   48,    8,   26,
          165,   83,  104,   83,   83,    8,   26,   26,   26,   26,
           26,   26,   13,   30,   40,  165,   79,   79,   26,   26,
           26,   79,   19,   79,   13,   79,   79,   79,   29,   79,
          102,  140,   79,  140,    8,    8,   79,   38,  114,  140,
            8,   91,    8,   99,   99,    8,   78,   78,   78,   78,
           78,   78,   78,   78,   78,   78,   85,   85,   85,   13,
          145,  142,    8,    8,    8,   42,  132,    8,  117,   81,
            8,    8,   24,   24,   24,  115,  115,  115,   16,   16,
           15,   15,   15,   88,   13,   15,   16,   82,   -1,   89,
           89,   16,   -1,   -1,   15,    8,   -1,   -1,   16,   -1,
           16,   16,  115,  115,  115,  115,   16,   25,   25,   25,
           13,   -1,    7,    7,   21,    7,   -1,   15,   16,  159,
          159,  159,   -1,    7,    7,  115,    7,    7,  108,  108,
           -1,   -1,   -1,   -1,  108,  108,  108,   -1,   -1,   15,
           15,   -1,   -1,   -1,   -1,   -1,   24,   24,   24,   24,
           24,   24,   24,   24,   24,   24,   24,   -1,   24,  115,
           -1,   -1,  115,  115,  115,   -1,   -1,   -1,   -1,   21,
           -1,   -1,   -1,   -1,   -1,   -1,   13,   -1,   -1,   21,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   21,   21,
           21
    );

    protected $gotoBase = array(
            0,    0, -338,    0,    0,  194,  154,  455,  -16,    0,
            0,  -38, -131,   53, -133,   12,   -6,    0,   -1,   80,
           40,  105,    0, -151,  162,  197,  345,  156,  189,   58,
           84,    0,    0,    0,    0,    0, -157,    0,   65,    0,
           57,    0,    9,    0,    0,  185, -461,    0, -332,  167,
            0,    0,    0,    0,    0,  170,    0,    0,  -23,    0,
            0,  290,    0,  106,  158, -229,    0,    0,    0,    0,
            0,    0,   -5,    0,    0, -216,    0, -166,   61,  -93,
            0,  -27,  -12, -319,    0,  123,    0,    0,   25, -244,
            0,   14,    0,    0,    0,  273,  297,    0,    0,  159,
          -65,    0,   34,    0,   83,    0, -264,    0,  210,    0,
            0,    0,    1,    0,   38,  164,    0,   11,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0, -106,
            0,    0,    7,    0,  190,    0,   77,    0,    0,    0,
          -82,    0,    6,    0,    0,    8,    0,    0,    0,    0,
            0,    0,  -51,    5,   51,  211,   72,    0,    0,  180,
            0,  -40,  253,    0,  271,   42,  -25,    0,    0
    );

    protected $gotoDefault = array(
        -32768,  480,  689,    4,  690,  763,  771,  564,  496,  659,
          325,  590,  388,  332,  858, 1035,  546,-32768,  158,  792,
         1155, 1163,  425,  795,  313,  327,  840,  841,  842,  367,
          352,  358,  365,  611,  591,  462,  827,  419,  819,  454,
          822,  418,  831,  647,  478,  835,    3,  837,  523,  868,
          353,  845,  354,  634,  847,  531,  849,  850,  361,  368,
          369, 1040,  539,  587,  862,  237,  533,  863,  351,  864,
          871,  356,  359,  643,  434,  473,  381, 1016,  574,  608,
          430,  448,  597,  596,  584,  897,  455,  432,  911,  328,
          919,  687, 1047,  603,  457,  927,  604,  934,  937,  497,
          498,  447,  949,  268,  458,  976,  626,  627,  961,  606,
          974,  442,  980,  420,  988, 1199,  423,  992,  260,  995,
          269,  644,  399, 1000, 1001,    7, 1006,  651,  652,   10,
          265,  477, 1030,  645,  417, 1046,  404, 1115, 1117,  525,
          459, 1135, 1134,  637,  474, 1140, 1202,  414,  499,  443,
          299,  500,  286,  316,  296,  515,  277,  317,  501,  444,
         1208, 1216,  314,   29, 1236, 1247,  323,  543,  579
    );

    protected $ruleToNonTerminal = array(
            0,    1,    3,    3,    2,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    6,    6,    6,    6,    6,
            6,    6,    7,    7,    8,    9,   10,   10,   10,   11,
           11,   12,   12,   13,   14,   14,   15,   15,   16,   16,
           17,   17,   19,   19,   22,   22,   23,   24,   24,   25,
           25,    4,    4,    4,    4,    4,    4,    4,    4,    4,
            4,    4,   30,   30,   31,   31,   33,   35,   35,   29,
           37,   37,   34,   39,   39,   36,   36,   38,   38,   40,
           40,   32,   41,   41,   42,   43,   44,   44,   45,   46,
           46,   48,   47,   47,   47,   47,   49,   49,   49,   49,
           49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
           49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
           26,   26,   68,   68,   71,   71,   70,   69,   69,   62,
           74,   74,   75,   75,   76,   76,   77,   77,   27,   27,
           28,   28,   28,   80,   80,   80,   81,   81,   84,   84,
           82,   82,   85,   86,   86,   56,   56,   64,   64,   67,
           67,   67,   66,   87,   87,   88,   57,   57,   57,   57,
           89,   89,   90,   90,   91,   91,   92,   93,   93,   94,
           94,   95,   95,   54,   54,   50,   50,   97,   52,   52,
           98,   51,   51,   53,   53,   63,   63,   63,   63,   78,
           78,  101,  101,  103,  103,  103,  103,  102,  102,  102,
          105,  105,  105,  106,  106,  108,  108,  108,  107,  107,
          109,  109,  110,  110,  110,  104,  104,   79,   79,   79,
           21,   21,  111,  111,  112,  112,  112,  112,   59,  113,
          113,  114,   60,  116,  116,  117,  117,  118,  118,   83,
          119,  119,  119,  119,  119,  124,  124,  125,  125,  126,
          126,  126,  126,  126,  127,  128,  128,  123,  123,  120,
          120,  122,  122,  130,  130,  129,  129,  129,  129,  129,
          129,  121,  131,  131,  133,  132,  132,   61,   96,  134,
          134,   55,   55,   18,   18,   18,   18,   18,   18,   18,
           18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
           18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
           18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
           18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
           18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
           18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
           18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
           18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
           18,   18,   18,   18,   18,  141,  135,  135,  140,  140,
          143,  144,  144,  145,  146,  146,  146,   20,   20,   72,
           72,   72,   72,  136,  136,  136,  136,  148,  148,  137,
          137,  139,  139,  139,  142,  142,  153,  153,  153,  153,
          153,  153,  153,  153,  153,  154,  154,  100,  156,  156,
          156,  156,  138,  138,  138,  138,  138,  138,  138,  138,
           58,   58,  151,  151,  151,  151,  157,  157,  147,  147,
          147,  158,  158,  158,  158,  158,  158,   73,   73,   65,
           65,   65,   65,  115,  115,  115,  115,  161,  160,  150,
          150,  150,  150,  150,  150,  150,  149,  149,  149,  159,
          159,  159,  159,   99,  155,  163,  163,  162,  162,  164,
          164,  164,  164,  164,  164,  164,  164,  152,  152,  152,
          152,  166,  167,  165,  165,  165,  165,  165,  165,  165,
          165,  168,  168,  168,  168
    );

    protected $ruleToLength = array(
            1,    1,    2,    0,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    0,    1,    0,    1,
            1,    3,    1,    2,    1,    3,    4,    1,    2,    0,
            1,    1,    1,    1,    1,    3,    5,    4,    3,    4,
            2,    3,    1,    1,    7,    6,    2,    3,    1,    2,
            3,    1,    2,    3,    1,    1,    3,    1,    3,    1,
            2,    2,    3,    1,    3,    2,    3,    1,    3,    2,
            0,    1,    1,    1,    1,    1,    3,    7,   10,    5,
            7,    9,    5,    3,    3,    3,    3,    3,    3,    1,
            2,    5,    7,    9,    6,    5,    6,    3,    2,    1,
            1,    1,    0,    2,    1,    3,    8,    0,    4,    2,
            1,    3,    0,    1,    0,    1,    3,    1,    8,    9,
            8,    7,    6,    1,    2,    2,    0,    2,    0,    2,
            0,    2,    2,    1,    3,    1,    4,    1,    4,    1,
            1,    4,    2,    1,    3,    3,    3,    4,    4,    5,
            0,    2,    4,    3,    1,    1,    7,    0,    2,    1,
            3,    3,    4,    1,    4,    0,    2,    5,    0,    2,
            6,    0,    2,    0,    3,    1,    2,    1,    1,    2,
            0,    1,    3,    0,    1,    1,    1,    6,    8,    6,
            1,    2,    1,    1,    1,    1,    1,    1,    3,    3,
            3,    3,    1,    2,    1,    0,    1,    0,    2,    2,
            2,    4,    1,    3,    1,    2,    2,    3,    2,    3,
            1,    1,    2,    3,    1,    1,    3,    2,    0,    1,
            5,    5,   10,    3,    1,    1,    3,    0,    2,    4,
            5,    4,    4,    4,    3,    1,    1,    1,    1,    1,
            1,    0,    1,    1,    2,    1,    1,    1,    1,    1,
            1,    2,    1,    3,    1,    1,    3,    2,    2,    3,
            1,    0,    1,    1,    3,    3,    3,    4,    1,    1,
            2,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    2,    2,    2,    2,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    2,    2,    2,    2,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            5,    4,    3,    4,    4,    2,    2,    4,    2,    2,
            2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
            3,    2,    1,    2,    4,    2,    2,    8,    9,    8,
            9,    9,   10,    9,   10,    8,    3,    2,    0,    4,
            2,    1,    3,    2,    2,    2,    4,    1,    1,    1,
            1,    1,    1,    1,    1,    3,    1,    1,    1,    0,
            3,    0,    1,    1,    0,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    3,    3,    3,    4,    1,
            1,    3,    1,    1,    1,    1,    1,    3,    2,    3,
            0,    1,    1,    3,    1,    1,    1,    1,    1,    3,
            1,    1,    4,    4,    1,    4,    4,    0,    1,    1,
            1,    3,    3,    1,    4,    2,    2,    1,    3,    1,
            4,    4,    3,    3,    3,    3,    1,    3,    1,    1,
            3,    1,    1,    4,    1,    1,    1,    3,    1,    1,
            2,    1,    3,    4,    3,    2,    0,    2,    2,    1,
            2,    1,    1,    1,    4,    3,    3,    3,    3,    6,
            3,    1,    1,    2,    1
    );

    protected function initReduceCallbacks() {
        $this->reduceCallbacks = [
            0 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            1 => function ($stackPos) {
                 $this->semValue = $this->handleNamespaces($this->semStack[$stackPos-(1-1)]);
            },
            2 => function ($stackPos) {
                 if (is_array($this->semStack[$stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)]); } else { $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)]; };
            },
            3 => function ($stackPos) {
                 $this->semValue = array();
            },
            4 => function ($stackPos) {
                 $startAttributes = $this->lookaheadStartAttributes; if (isset($startAttributes['comments'])) { $nop = new Stmt\Nop($this->createCommentNopAttributes($startAttributes['comments'])); } else { $nop = null; };
            if ($nop !== null) { $this->semStack[$stackPos-(1-1)][] = $nop; } $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            5 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            6 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            7 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            8 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            9 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            10 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            11 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            12 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            13 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            14 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            15 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            16 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            17 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            18 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            19 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            20 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            21 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            22 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            23 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            24 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            25 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            26 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            27 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            28 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            29 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            30 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            31 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            32 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            33 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            34 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            35 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            36 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            37 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            38 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            39 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            40 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            41 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            42 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            43 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            44 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            45 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            46 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            47 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            48 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            49 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            50 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            51 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            52 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            53 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            54 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            55 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            56 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            57 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            58 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            59 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            60 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            61 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            62 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            63 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            64 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            65 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            66 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            67 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            68 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            69 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            70 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            71 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            72 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            73 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            74 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            75 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            76 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            77 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            78 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            79 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            80 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            81 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            82 => function ($stackPos) {
                 $this->semValue = new Node\Identifier($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            83 => function ($stackPos) {
                 $this->semValue = new Node\Identifier($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            84 => function ($stackPos) {
                 $this->semValue = new Node\Identifier($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            85 => function ($stackPos) {
                 $this->semValue = new Node\Identifier($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            86 => function ($stackPos) {
                 $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            87 => function ($stackPos) {
                 $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            88 => function ($stackPos) {
                 $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            89 => function ($stackPos) {
                 $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            90 => function ($stackPos) {
                 $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            91 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            92 => function ($stackPos) {
                 $this->semValue = new Name(substr($this->semStack[$stackPos-(1-1)], 1), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            93 => function ($stackPos) {
                 $this->semValue = new Expr\Variable(substr($this->semStack[$stackPos-(1-1)], 1), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            94 => function ($stackPos) {
                 /* nothing */
            },
            95 => function ($stackPos) {
                 /* nothing */
            },
            96 => function ($stackPos) {
                 /* nothing */
            },
            97 => function ($stackPos) {
                 $this->emitError(new Error('A trailing comma is not allowed here', $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes));
            },
            98 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            99 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            100 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
            },
            101 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
            },
            102 => function ($stackPos) {
                 $this->semValue = new Node\Attribute($this->semStack[$stackPos-(1-1)], [], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            103 => function ($stackPos) {
                 $this->semValue = new Node\Attribute($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            104 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
            },
            105 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
            },
            106 => function ($stackPos) {
                 $this->semValue = new Node\AttributeGroup($this->semStack[$stackPos-(4-2)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            107 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
            },
            108 => function ($stackPos) {
                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            109 => function ($stackPos) {
                 $this->semValue = [];
            },
            110 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            111 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            112 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            113 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            114 => function ($stackPos) {
                 $this->semValue = new Stmt\HaltCompiler($this->lexer->handleHaltCompiler(), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            115 => function ($stackPos) {
                 $this->semValue = new Stmt\Namespace_($this->semStack[$stackPos-(3-2)], null, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            $this->semValue->setAttribute('kind', Stmt\Namespace_::KIND_SEMICOLON);
            $this->checkNamespace($this->semValue);
            },
            116 => function ($stackPos) {
                 $this->semValue = new Stmt\Namespace_($this->semStack[$stackPos-(5-2)], $this->semStack[$stackPos-(5-4)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
            $this->semValue->setAttribute('kind', Stmt\Namespace_::KIND_BRACED);
            $this->checkNamespace($this->semValue);
            },
            117 => function ($stackPos) {
                 $this->semValue = new Stmt\Namespace_(null, $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            $this->semValue->setAttribute('kind', Stmt\Namespace_::KIND_BRACED);
            $this->checkNamespace($this->semValue);
            },
            118 => function ($stackPos) {
                 $this->semValue = new Stmt\Use_($this->semStack[$stackPos-(3-2)], Stmt\Use_::TYPE_NORMAL, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            119 => function ($stackPos) {
                 $this->semValue = new Stmt\Use_($this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-2)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            120 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            121 => function ($stackPos) {
                 $this->semValue = new Stmt\Const_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            122 => function ($stackPos) {
                 $this->semValue = Stmt\Use_::TYPE_FUNCTION;
            },
            123 => function ($stackPos) {
                 $this->semValue = Stmt\Use_::TYPE_CONSTANT;
            },
            124 => function ($stackPos) {
                 $this->semValue = new Stmt\GroupUse($this->semStack[$stackPos-(7-3)], $this->semStack[$stackPos-(7-6)], $this->semStack[$stackPos-(7-2)], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);
            },
            125 => function ($stackPos) {
                 $this->semValue = new Stmt\GroupUse($this->semStack[$stackPos-(6-2)], $this->semStack[$stackPos-(6-5)], Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);
            },
            126 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            127 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
            },
            128 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
            },
            129 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            130 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
            },
            131 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
            },
            132 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            133 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
            },
            134 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
            },
            135 => function ($stackPos) {
                 $this->semValue = new Stmt\UseUse($this->semStack[$stackPos-(1-1)], null, Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); $this->checkUseUse($this->semValue, $stackPos-(1-1));
            },
            136 => function ($stackPos) {
                 $this->semValue = new Stmt\UseUse($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); $this->checkUseUse($this->semValue, $stackPos-(3-3));
            },
            137 => function ($stackPos) {
                 $this->semValue = new Stmt\UseUse($this->semStack[$stackPos-(1-1)], null, Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); $this->checkUseUse($this->semValue, $stackPos-(1-1));
            },
            138 => function ($stackPos) {
                 $this->semValue = new Stmt\UseUse($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); $this->checkUseUse($this->semValue, $stackPos-(3-3));
            },
            139 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; $this->semValue->type = Stmt\Use_::TYPE_NORMAL;
            },
            140 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-2)]; $this->semValue->type = $this->semStack[$stackPos-(2-1)];
            },
            141 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            142 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
            },
            143 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
            },
            144 => function ($stackPos) {
                 $this->semValue = new Node\Const_($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            145 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            146 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
            },
            147 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
            },
            148 => function ($stackPos) {
                 $this->semValue = new Node\Const_($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            149 => function ($stackPos) {
                 if (is_array($this->semStack[$stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)]); } else { $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)]; };
            },
            150 => function ($stackPos) {
                 $this->semValue = array();
            },
            151 => function ($stackPos) {
                 $startAttributes = $this->lookaheadStartAttributes; if (isset($startAttributes['comments'])) { $nop = new Stmt\Nop($this->createCommentNopAttributes($startAttributes['comments'])); } else { $nop = null; };
            if ($nop !== null) { $this->semStack[$stackPos-(1-1)][] = $nop; } $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            152 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            153 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            154 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            155 => function ($stackPos) {
                 throw new Error('__HALT_COMPILER() can only be used from the outermost scope', $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            156 => function ($stackPos) {

        if ($this->semStack[$stackPos-(3-2)]) {
            $this->semValue = $this->semStack[$stackPos-(3-2)]; $attrs = $this->startAttributeStack[$stackPos-(3-1)]; $stmts = $this->semValue; if (!empty($attrs['comments'])) {$stmts[0]->setAttribute('comments', array_merge($attrs['comments'], $stmts[0]->getAttribute('comments', []))); };
        } else {
            $startAttributes = $this->startAttributeStack[$stackPos-(3-1)]; if (isset($startAttributes['comments'])) { $this->semValue = new Stmt\Nop($startAttributes + $this->endAttributes); } else { $this->semValue = null; };
            if (null === $this->semValue) { $this->semValue = array(); }
        }

            },
            157 => function ($stackPos) {
                 $this->semValue = new Stmt\If_($this->semStack[$stackPos-(7-3)], ['stmts' => is_array($this->semStack[$stackPos-(7-5)]) ? $this->semStack[$stackPos-(7-5)] : array($this->semStack[$stackPos-(7-5)]), 'elseifs' => $this->semStack[$stackPos-(7-6)], 'else' => $this->semStack[$stackPos-(7-7)]], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);
            },
            158 => function ($stackPos) {
                 $this->semValue = new Stmt\If_($this->semStack[$stackPos-(10-3)], ['stmts' => $this->semStack[$stackPos-(10-6)], 'elseifs' => $this->semStack[$stackPos-(10-7)], 'else' => $this->semStack[$stackPos-(10-8)]], $this->startAttributeStack[$stackPos-(10-1)] + $this->endAttributes);
            },
            159 => function ($stackPos) {
                 $this->semValue = new Stmt\While_($this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-5)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
            },
            160 => function ($stackPos) {
                 $this->semValue = new Stmt\Do_($this->semStack[$stackPos-(7-5)], is_array($this->semStack[$stackPos-(7-2)]) ? $this->semStack[$stackPos-(7-2)] : array($this->semStack[$stackPos-(7-2)]), $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);
            },
            161 => function ($stackPos) {
                 $this->semValue = new Stmt\For_(['init' => $this->semStack[$stackPos-(9-3)], 'cond' => $this->semStack[$stackPos-(9-5)], 'loop' => $this->semStack[$stackPos-(9-7)], 'stmts' => $this->semStack[$stackPos-(9-9)]], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);
            },
            162 => function ($stackPos) {
                 $this->semValue = new Stmt\Switch_($this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-5)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
            },
            163 => function ($stackPos) {
                 $this->semValue = new Stmt\Break_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            164 => function ($stackPos) {
                 $this->semValue = new Stmt\Continue_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            165 => function ($stackPos) {
                 $this->semValue = new Stmt\Return_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            166 => function ($stackPos) {
                 $this->semValue = new Stmt\Global_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            167 => function ($stackPos) {
                 $this->semValue = new Stmt\Static_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            168 => function ($stackPos) {
                 $this->semValue = new Stmt\Echo_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            169 => function ($stackPos) {
                 $this->semValue = new Stmt\InlineHTML($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            170 => function ($stackPos) {

        $e = $this->semStack[$stackPos-(2-1)];
        if ($e instanceof Expr\Throw_) {
            // For backwards-compatibility reasons, convert throw in statement position into
            // Stmt\Throw_ rather than Stmt\Expression(Expr\Throw_).
            $this->semValue = new Stmt\Throw_($e->expr, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
        } else {
            $this->semValue = new Stmt\Expression($e, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
        }

            },
            171 => function ($stackPos) {
                 $this->semValue = new Stmt\Unset_($this->semStack[$stackPos-(5-3)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
            },
            172 => function ($stackPos) {
                 $this->semValue = new Stmt\Foreach_($this->semStack[$stackPos-(7-3)], $this->semStack[$stackPos-(7-5)][0], ['keyVar' => null, 'byRef' => $this->semStack[$stackPos-(7-5)][1], 'stmts' => $this->semStack[$stackPos-(7-7)]], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);
            },
            173 => function ($stackPos) {
                 $this->semValue = new Stmt\Foreach_($this->semStack[$stackPos-(9-3)], $this->semStack[$stackPos-(9-7)][0], ['keyVar' => $this->semStack[$stackPos-(9-5)], 'byRef' => $this->semStack[$stackPos-(9-7)][1], 'stmts' => $this->semStack[$stackPos-(9-9)]], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);
            },
            174 => function ($stackPos) {
                 $this->semValue = new Stmt\Foreach_($this->semStack[$stackPos-(6-3)], new Expr\Error($this->startAttributeStack[$stackPos-(6-4)] + $this->endAttributeStack[$stackPos-(6-4)]), ['stmts' => $this->semStack[$stackPos-(6-6)]], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);
            },
            175 => function ($stackPos) {
                 $this->semValue = new Stmt\Declare_($this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-5)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
            },
            176 => function ($stackPos) {
                 $this->semValue = new Stmt\TryCatch($this->semStack[$stackPos-(6-3)], $this->semStack[$stackPos-(6-5)], $this->semStack[$stackPos-(6-6)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes); $this->checkTryCatch($this->semValue);
            },
            177 => function ($stackPos) {
                 $this->semValue = new Stmt\Goto_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            178 => function ($stackPos) {
                 $this->semValue = new Stmt\Label($this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            179 => function ($stackPos) {
                 $this->semValue = array(); /* means: no statement */
            },
            180 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            181 => function ($stackPos) {
                 $startAttributes = $this->startAttributeStack[$stackPos-(1-1)]; if (isset($startAttributes['comments'])) { $this->semValue = new Stmt\Nop($startAttributes + $this->endAttributes); } else { $this->semValue = null; };
            if ($this->semValue === null) $this->semValue = array(); /* means: no statement */
            },
            182 => function ($stackPos) {
                 $this->semValue = array();
            },
            183 => function ($stackPos) {
                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            184 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
            },
            185 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
            },
            186 => function ($stackPos) {
                 $this->semValue = new Stmt\Catch_($this->semStack[$stackPos-(8-3)], $this->semStack[$stackPos-(8-4)], $this->semStack[$stackPos-(8-7)], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes);
            },
            187 => function ($stackPos) {
                 $this->semValue = null;
            },
            188 => function ($stackPos) {
                 $this->semValue = new Stmt\Finally_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            189 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            190 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
            },
            191 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
            },
            192 => function ($stackPos) {
                 $this->semValue = false;
            },
            193 => function ($stackPos) {
                 $this->semValue = true;
            },
            194 => function ($stackPos) {
                 $this->semValue = false;
            },
            195 => function ($stackPos) {
                 $this->semValue = true;
            },
            196 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(3-2)];
            },
            197 => function ($stackPos) {
                 $this->semValue = [];
            },
            198 => function ($stackPos) {
                 $this->semValue = new Stmt\Function_($this->semStack[$stackPos-(8-3)], ['byRef' => $this->semStack[$stackPos-(8-2)], 'params' => $this->semStack[$stackPos-(8-5)], 'returnType' => $this->semStack[$stackPos-(8-7)], 'stmts' => $this->semStack[$stackPos-(8-8)], 'attrGroups' => []], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes);
            },
            199 => function ($stackPos) {
                 $this->semValue = new Stmt\Function_($this->semStack[$stackPos-(9-4)], ['byRef' => $this->semStack[$stackPos-(9-3)], 'params' => $this->semStack[$stackPos-(9-6)], 'returnType' => $this->semStack[$stackPos-(9-8)], 'stmts' => $this->semStack[$stackPos-(9-9)], 'attrGroups' => $this->semStack[$stackPos-(9-1)]], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);
            },
            200 => function ($stackPos) {
                 $this->semValue = new Stmt\Class_($this->semStack[$stackPos-(8-3)], ['type' => $this->semStack[$stackPos-(8-2)], 'extends' => $this->semStack[$stackPos-(8-4)], 'implements' => $this->semStack[$stackPos-(8-5)], 'stmts' => $this->semStack[$stackPos-(8-7)], 'attrGroups' => $this->semStack[$stackPos-(8-1)]], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes);
            $this->checkClass($this->semValue, $stackPos-(8-3));
            },
            201 => function ($stackPos) {
                 $this->semValue = new Stmt\Interface_($this->semStack[$stackPos-(7-3)], ['extends' => $this->semStack[$stackPos-(7-4)], 'stmts' => $this->semStack[$stackPos-(7-6)], 'attrGroups' => $this->semStack[$stackPos-(7-1)]], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);
            $this->checkInterface($this->semValue, $stackPos-(7-3));
            },
            202 => function ($stackPos) {
                 $this->semValue = new Stmt\Trait_($this->semStack[$stackPos-(6-3)], ['stmts' => $this->semStack[$stackPos-(6-5)], 'attrGroups' => $this->semStack[$stackPos-(6-1)]], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);
            },
            203 => function ($stackPos) {
                 $this->semValue = 0;
            },
            204 => function ($stackPos) {
                 $this->semValue = Stmt\Class_::MODIFIER_ABSTRACT;
            },
            205 => function ($stackPos) {
                 $this->semValue = Stmt\Class_::MODIFIER_FINAL;
            },
            206 => function ($stackPos) {
                 $this->semValue = null;
            },
            207 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-2)];
            },
            208 => function ($stackPos) {
                 $this->semValue = array();
            },
            209 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-2)];
            },
            210 => function ($stackPos) {
                 $this->semValue = array();
            },
            211 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-2)];
            },
            212 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            213 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
            },
            214 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
            },
            215 => function ($stackPos) {
                 $this->semValue = is_array($this->semStack[$stackPos-(1-1)]) ? $this->semStack[$stackPos-(1-1)] : array($this->semStack[$stackPos-(1-1)]);
            },
            216 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(4-2)];
            },
            217 => function ($stackPos) {
                 $this->semValue = is_array($this->semStack[$stackPos-(1-1)]) ? $this->semStack[$stackPos-(1-1)] : array($this->semStack[$stackPos-(1-1)]);
            },
            218 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(4-2)];
            },
            219 => function ($stackPos) {
                 $this->semValue = is_array($this->semStack[$stackPos-(1-1)]) ? $this->semStack[$stackPos-(1-1)] : array($this->semStack[$stackPos-(1-1)]);
            },
            220 => function ($stackPos) {
                 $this->semValue = null;
            },
            221 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(4-2)];
            },
            222 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            223 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
            },
            224 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
            },
            225 => function ($stackPos) {
                 $this->semValue = new Stmt\DeclareDeclare($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            226 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(3-2)];
            },
            227 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(4-3)];
            },
            228 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(4-2)];
            },
            229 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(5-3)];
            },
            230 => function ($stackPos) {
                 $this->semValue = array();
            },
            231 => function ($stackPos) {
                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            232 => function ($stackPos) {
                 $this->semValue = new Stmt\Case_($this->semStack[$stackPos-(4-2)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            233 => function ($stackPos) {
                 $this->semValue = new Stmt\Case_(null, $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            234 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            235 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            236 => function ($stackPos) {
                 $this->semValue = new Expr\Match_($this->semStack[$stackPos-(7-3)], $this->semStack[$stackPos-(7-6)], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);
            },
            237 => function ($stackPos) {
                 $this->semValue = [];
            },
            238 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            239 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
            },
            240 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
            },
            241 => function ($stackPos) {
                 $this->semValue = new Node\MatchArm($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            242 => function ($stackPos) {
                 $this->semValue = new Node\MatchArm(null, $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            243 => function ($stackPos) {
                 $this->semValue = is_array($this->semStack[$stackPos-(1-1)]) ? $this->semStack[$stackPos-(1-1)] : array($this->semStack[$stackPos-(1-1)]);
            },
            244 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(4-2)];
            },
            245 => function ($stackPos) {
                 $this->semValue = array();
            },
            246 => function ($stackPos) {
                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            247 => function ($stackPos) {
                 $this->semValue = new Stmt\ElseIf_($this->semStack[$stackPos-(5-3)], is_array($this->semStack[$stackPos-(5-5)]) ? $this->semStack[$stackPos-(5-5)] : array($this->semStack[$stackPos-(5-5)]), $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
            },
            248 => function ($stackPos) {
                 $this->semValue = array();
            },
            249 => function ($stackPos) {
                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            250 => function ($stackPos) {
                 $this->semValue = new Stmt\ElseIf_($this->semStack[$stackPos-(6-3)], $this->semStack[$stackPos-(6-6)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);
            },
            251 => function ($stackPos) {
                 $this->semValue = null;
            },
            252 => function ($stackPos) {
                 $this->semValue = new Stmt\Else_(is_array($this->semStack[$stackPos-(2-2)]) ? $this->semStack[$stackPos-(2-2)] : array($this->semStack[$stackPos-(2-2)]), $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            253 => function ($stackPos) {
                 $this->semValue = null;
            },
            254 => function ($stackPos) {
                 $this->semValue = new Stmt\Else_($this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            255 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)], false);
            },
            256 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(2-2)], true);
            },
            257 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)], false);
            },
            258 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)], false);
            },
            259 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            260 => function ($stackPos) {
                 $this->semValue = array();
            },
            261 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
            },
            262 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
            },
            263 => function ($stackPos) {
                 $this->semValue = 0;
            },
            264 => function ($stackPos) {
                 $this->semValue = Stmt\Class_::MODIFIER_PUBLIC;
            },
            265 => function ($stackPos) {
                 $this->semValue = Stmt\Class_::MODIFIER_PROTECTED;
            },
            266 => function ($stackPos) {
                 $this->semValue = Stmt\Class_::MODIFIER_PRIVATE;
            },
            267 => function ($stackPos) {
                 $this->semValue = new Node\Param($this->semStack[$stackPos-(6-6)], null, $this->semStack[$stackPos-(6-3)], $this->semStack[$stackPos-(6-4)], $this->semStack[$stackPos-(6-5)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes, $this->semStack[$stackPos-(6-2)], $this->semStack[$stackPos-(6-1)]);
            $this->checkParam($this->semValue);
            },
            268 => function ($stackPos) {
                 $this->semValue = new Node\Param($this->semStack[$stackPos-(8-6)], $this->semStack[$stackPos-(8-8)], $this->semStack[$stackPos-(8-3)], $this->semStack[$stackPos-(8-4)], $this->semStack[$stackPos-(8-5)], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes, $this->semStack[$stackPos-(8-2)], $this->semStack[$stackPos-(8-1)]);
            $this->checkParam($this->semValue);
            },
            269 => function ($stackPos) {
                 $this->semValue = new Node\Param(new Expr\Error($this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes), null, $this->semStack[$stackPos-(6-3)], $this->semStack[$stackPos-(6-4)], $this->semStack[$stackPos-(6-5)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes, $this->semStack[$stackPos-(6-2)], $this->semStack[$stackPos-(6-1)]);
            },
            270 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            271 => function ($stackPos) {
                 $this->semValue = new Node\NullableType($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            272 => function ($stackPos) {
                 $this->semValue = new Node\UnionType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            273 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            274 => function ($stackPos) {
                 $this->semValue = new Node\Name('static', $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            275 => function ($stackPos) {
                 $this->semValue = $this->handleBuiltinTypes($this->semStack[$stackPos-(1-1)]);
            },
            276 => function ($stackPos) {
                 $this->semValue = new Node\Identifier('array', $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            277 => function ($stackPos) {
                 $this->semValue = new Node\Identifier('callable', $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            278 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)]);
            },
            279 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
            },
            280 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)]);
            },
            281 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
            },
            282 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            283 => function ($stackPos) {
                 $this->semValue = new Node\NullableType($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            284 => function ($stackPos) {
                 $this->semValue = new Node\UnionType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            285 => function ($stackPos) {
                 $this->semValue = null;
            },
            286 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            287 => function ($stackPos) {
                 $this->semValue = null;
            },
            288 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-2)];
            },
            289 => function ($stackPos) {
                 $this->semValue = null;
            },
            290 => function ($stackPos) {
                 $this->semValue = array();
            },
            291 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(4-2)];
            },
            292 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
            },
            293 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
            },
            294 => function ($stackPos) {
                 $this->semValue = new Node\Arg($this->semStack[$stackPos-(1-1)], false, false, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            295 => function ($stackPos) {
                 $this->semValue = new Node\Arg($this->semStack[$stackPos-(2-2)], true, false, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            296 => function ($stackPos) {
                 $this->semValue = new Node\Arg($this->semStack[$stackPos-(2-2)], false, true, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            297 => function ($stackPos) {
                 $this->semValue = new Node\Arg($this->semStack[$stackPos-(3-3)], false, false, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes, $this->semStack[$stackPos-(3-1)]);
            },
            298 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            299 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
            },
            300 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
            },
            301 => function ($stackPos) {
                 $this->semValue = new Expr\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            302 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            303 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
            },
            304 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
            },
            305 => function ($stackPos) {
                 $this->semValue = new Stmt\StaticVar($this->semStack[$stackPos-(1-1)], null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            306 => function ($stackPos) {
                 $this->semValue = new Stmt\StaticVar($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            307 => function ($stackPos) {
                 if ($this->semStack[$stackPos-(2-2)] !== null) { $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)]; }
            },
            308 => function ($stackPos) {
                 $this->semValue = array();
            },
            309 => function ($stackPos) {
                 $startAttributes = $this->lookaheadStartAttributes; if (isset($startAttributes['comments'])) { $nop = new Stmt\Nop($this->createCommentNopAttributes($startAttributes['comments'])); } else { $nop = null; };
            if ($nop !== null) { $this->semStack[$stackPos-(1-1)][] = $nop; } $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            310 => function ($stackPos) {
                 $this->semValue = new Stmt\Property($this->semStack[$stackPos-(5-2)], $this->semStack[$stackPos-(5-4)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes, $this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-1)]);
            $this->checkProperty($this->semValue, $stackPos-(5-1));
            },
            311 => function ($stackPos) {
                 $this->semValue = new Stmt\ClassConst($this->semStack[$stackPos-(5-4)], $this->semStack[$stackPos-(5-2)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes, $this->semStack[$stackPos-(5-1)]);
            $this->checkClassConst($this->semValue, $stackPos-(5-1));
            },
            312 => function ($stackPos) {
                 $this->semValue = new Stmt\ClassMethod($this->semStack[$stackPos-(10-5)], ['type' => $this->semStack[$stackPos-(10-2)], 'byRef' => $this->semStack[$stackPos-(10-4)], 'params' => $this->semStack[$stackPos-(10-7)], 'returnType' => $this->semStack[$stackPos-(10-9)], 'stmts' => $this->semStack[$stackPos-(10-10)], 'attrGroups' => $this->semStack[$stackPos-(10-1)]], $this->startAttributeStack[$stackPos-(10-1)] + $this->endAttributes);
            $this->checkClassMethod($this->semValue, $stackPos-(10-1));
            },
            313 => function ($stackPos) {
                 $this->semValue = new Stmt\TraitUse($this->semStack[$stackPos-(3-2)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            314 => function ($stackPos) {
                 $this->semValue = null; /* will be skipped */
            },
            315 => function ($stackPos) {
                 $this->semValue = array();
            },
            316 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(3-2)];
            },
            317 => function ($stackPos) {
                 $this->semValue = array();
            },
            318 => function ($stackPos) {
                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            319 => function ($stackPos) {
                 $this->semValue = new Stmt\TraitUseAdaptation\Precedence($this->semStack[$stackPos-(4-1)][0], $this->semStack[$stackPos-(4-1)][1], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            320 => function ($stackPos) {
                 $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$stackPos-(5-1)][0], $this->semStack[$stackPos-(5-1)][1], $this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-4)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
            },
            321 => function ($stackPos) {
                 $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$stackPos-(4-1)][0], $this->semStack[$stackPos-(4-1)][1], $this->semStack[$stackPos-(4-3)], null, $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            322 => function ($stackPos) {
                 $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$stackPos-(4-1)][0], $this->semStack[$stackPos-(4-1)][1], null, $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            323 => function ($stackPos) {
                 $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$stackPos-(4-1)][0], $this->semStack[$stackPos-(4-1)][1], null, $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            324 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)]);
            },
            325 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            326 => function ($stackPos) {
                 $this->semValue = array(null, $this->semStack[$stackPos-(1-1)]);
            },
            327 => function ($stackPos) {
                 $this->semValue = null;
            },
            328 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            329 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            330 => function ($stackPos) {
                 $this->semValue = 0;
            },
            331 => function ($stackPos) {
                 $this->semValue = 0;
            },
            332 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            333 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            334 => function ($stackPos) {
                 $this->checkModifier($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $stackPos-(2-2)); $this->semValue = $this->semStack[$stackPos-(2-1)] | $this->semStack[$stackPos-(2-2)];
            },
            335 => function ($stackPos) {
                 $this->semValue = Stmt\Class_::MODIFIER_PUBLIC;
            },
            336 => function ($stackPos) {
                 $this->semValue = Stmt\Class_::MODIFIER_PROTECTED;
            },
            337 => function ($stackPos) {
                 $this->semValue = Stmt\Class_::MODIFIER_PRIVATE;
            },
            338 => function ($stackPos) {
                 $this->semValue = Stmt\Class_::MODIFIER_STATIC;
            },
            339 => function ($stackPos) {
                 $this->semValue = Stmt\Class_::MODIFIER_ABSTRACT;
            },
            340 => function ($stackPos) {
                 $this->semValue = Stmt\Class_::MODIFIER_FINAL;
            },
            341 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            342 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
            },
            343 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
            },
            344 => function ($stackPos) {
                 $this->semValue = new Node\VarLikeIdentifier(substr($this->semStack[$stackPos-(1-1)], 1), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            345 => function ($stackPos) {
                 $this->semValue = new Stmt\PropertyProperty($this->semStack[$stackPos-(1-1)], null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            346 => function ($stackPos) {
                 $this->semValue = new Stmt\PropertyProperty($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            347 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            348 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            349 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
            },
            350 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
            },
            351 => function ($stackPos) {
                 $this->semValue = array();
            },
            352 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            353 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            354 => function ($stackPos) {
                 $this->semValue = new Expr\Assign($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            355 => function ($stackPos) {
                 $this->semValue = new Expr\Assign($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            356 => function ($stackPos) {
                 $this->semValue = new Expr\Assign($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            357 => function ($stackPos) {
                 $this->semValue = new Expr\AssignRef($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            358 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            359 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            360 => function ($stackPos) {
                 $this->semValue = new Expr\Clone_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            361 => function ($stackPos) {
                 $this->semValue = new Expr\AssignOp\Plus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            362 => function ($stackPos) {
                 $this->semValue = new Expr\AssignOp\Minus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            363 => function ($stackPos) {
                 $this->semValue = new Expr\AssignOp\Mul($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            364 => function ($stackPos) {
                 $this->semValue = new Expr\AssignOp\Div($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            365 => function ($stackPos) {
                 $this->semValue = new Expr\AssignOp\Concat($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            366 => function ($stackPos) {
                 $this->semValue = new Expr\AssignOp\Mod($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            367 => function ($stackPos) {
                 $this->semValue = new Expr\AssignOp\BitwiseAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            368 => function ($stackPos) {
                 $this->semValue = new Expr\AssignOp\BitwiseOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            369 => function ($stackPos) {
                 $this->semValue = new Expr\AssignOp\BitwiseXor($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            370 => function ($stackPos) {
                 $this->semValue = new Expr\AssignOp\ShiftLeft($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            371 => function ($stackPos) {
                 $this->semValue = new Expr\AssignOp\ShiftRight($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            372 => function ($stackPos) {
                 $this->semValue = new Expr\AssignOp\Pow($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            373 => function ($stackPos) {
                 $this->semValue = new Expr\AssignOp\Coalesce($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            374 => function ($stackPos) {
                 $this->semValue = new Expr\PostInc($this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            375 => function ($stackPos) {
                 $this->semValue = new Expr\PreInc($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            376 => function ($stackPos) {
                 $this->semValue = new Expr\PostDec($this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            377 => function ($stackPos) {
                 $this->semValue = new Expr\PreDec($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            378 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\BooleanOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            379 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\BooleanAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            380 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\LogicalOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            381 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\LogicalAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            382 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\LogicalXor($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            383 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\BitwiseOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            384 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\BitwiseAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            385 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\BitwiseXor($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            386 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\Concat($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            387 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\Plus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            388 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\Minus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            389 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\Mul($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            390 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\Div($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            391 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\Mod($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            392 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\ShiftLeft($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            393 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\ShiftRight($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            394 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\Pow($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            395 => function ($stackPos) {
                 $this->semValue = new Expr\UnaryPlus($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            396 => function ($stackPos) {
                 $this->semValue = new Expr\UnaryMinus($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            397 => function ($stackPos) {
                 $this->semValue = new Expr\BooleanNot($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            398 => function ($stackPos) {
                 $this->semValue = new Expr\BitwiseNot($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            399 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\Identical($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            400 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\NotIdentical($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            401 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\Equal($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            402 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\NotEqual($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            403 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\Spaceship($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            404 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\Smaller($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            405 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\SmallerOrEqual($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            406 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\Greater($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            407 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\GreaterOrEqual($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            408 => function ($stackPos) {
                 $this->semValue = new Expr\Instanceof_($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            409 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(3-2)];
            },
            410 => function ($stackPos) {
                 $this->semValue = new Expr\Ternary($this->semStack[$stackPos-(5-1)], $this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-5)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
            },
            411 => function ($stackPos) {
                 $this->semValue = new Expr\Ternary($this->semStack[$stackPos-(4-1)], null, $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            412 => function ($stackPos) {
                 $this->semValue = new Expr\BinaryOp\Coalesce($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            413 => function ($stackPos) {
                 $this->semValue = new Expr\Isset_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            414 => function ($stackPos) {
                 $this->semValue = new Expr\Empty_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            415 => function ($stackPos) {
                 $this->semValue = new Expr\Include_($this->semStack[$stackPos-(2-2)], Expr\Include_::TYPE_INCLUDE, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            416 => function ($stackPos) {
                 $this->semValue = new Expr\Include_($this->semStack[$stackPos-(2-2)], Expr\Include_::TYPE_INCLUDE_ONCE, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            417 => function ($stackPos) {
                 $this->semValue = new Expr\Eval_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            418 => function ($stackPos) {
                 $this->semValue = new Expr\Include_($this->semStack[$stackPos-(2-2)], Expr\Include_::TYPE_REQUIRE, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            419 => function ($stackPos) {
                 $this->semValue = new Expr\Include_($this->semStack[$stackPos-(2-2)], Expr\Include_::TYPE_REQUIRE_ONCE, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            420 => function ($stackPos) {
                 $this->semValue = new Expr\Cast\Int_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            421 => function ($stackPos) {
                 $attrs = $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes;
            $attrs['kind'] = $this->getFloatCastKind($this->semStack[$stackPos-(2-1)]);
            $this->semValue = new Expr\Cast\Double($this->semStack[$stackPos-(2-2)], $attrs);
            },
            422 => function ($stackPos) {
                 $this->semValue = new Expr\Cast\String_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            423 => function ($stackPos) {
                 $this->semValue = new Expr\Cast\Array_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            424 => function ($stackPos) {
                 $this->semValue = new Expr\Cast\Object_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            425 => function ($stackPos) {
                 $this->semValue = new Expr\Cast\Bool_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            426 => function ($stackPos) {
                 $this->semValue = new Expr\Cast\Unset_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            427 => function ($stackPos) {
                 $attrs = $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes;
            $attrs['kind'] = strtolower($this->semStack[$stackPos-(2-1)]) === 'exit' ? Expr\Exit_::KIND_EXIT : Expr\Exit_::KIND_DIE;
            $this->semValue = new Expr\Exit_($this->semStack[$stackPos-(2-2)], $attrs);
            },
            428 => function ($stackPos) {
                 $this->semValue = new Expr\ErrorSuppress($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            429 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            430 => function ($stackPos) {
                 $this->semValue = new Expr\ShellExec($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            431 => function ($stackPos) {
                 $this->semValue = new Expr\Print_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            432 => function ($stackPos) {
                 $this->semValue = new Expr\Yield_(null, null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            433 => function ($stackPos) {
                 $this->semValue = new Expr\Yield_($this->semStack[$stackPos-(2-2)], null, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            434 => function ($stackPos) {
                 $this->semValue = new Expr\Yield_($this->semStack[$stackPos-(4-4)], $this->semStack[$stackPos-(4-2)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            435 => function ($stackPos) {
                 $this->semValue = new Expr\YieldFrom($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            436 => function ($stackPos) {
                 $this->semValue = new Expr\Throw_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            437 => function ($stackPos) {
                 $this->semValue = new Expr\ArrowFunction(['static' => false, 'byRef' => $this->semStack[$stackPos-(8-2)], 'params' => $this->semStack[$stackPos-(8-4)], 'returnType' => $this->semStack[$stackPos-(8-6)], 'expr' => $this->semStack[$stackPos-(8-8)], 'attrGroups' => []], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes);
            },
            438 => function ($stackPos) {
                 $this->semValue = new Expr\ArrowFunction(['static' => true, 'byRef' => $this->semStack[$stackPos-(9-3)], 'params' => $this->semStack[$stackPos-(9-5)], 'returnType' => $this->semStack[$stackPos-(9-7)], 'expr' => $this->semStack[$stackPos-(9-9)], 'attrGroups' => []], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);
            },
            439 => function ($stackPos) {
                 $this->semValue = new Expr\Closure(['static' => false, 'byRef' => $this->semStack[$stackPos-(8-2)], 'params' => $this->semStack[$stackPos-(8-4)], 'uses' => $this->semStack[$stackPos-(8-6)], 'returnType' => $this->semStack[$stackPos-(8-7)], 'stmts' => $this->semStack[$stackPos-(8-8)], 'attrGroups' => []], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes);
            },
            440 => function ($stackPos) {
                 $this->semValue = new Expr\Closure(['static' => true, 'byRef' => $this->semStack[$stackPos-(9-3)], 'params' => $this->semStack[$stackPos-(9-5)], 'uses' => $this->semStack[$stackPos-(9-7)], 'returnType' => $this->semStack[$stackPos-(9-8)], 'stmts' => $this->semStack[$stackPos-(9-9)], 'attrGroups' => []], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);
            },
            441 => function ($stackPos) {
                 $this->semValue = new Expr\ArrowFunction(['static' => false, 'byRef' => $this->semStack[$stackPos-(9-3)], 'params' => $this->semStack[$stackPos-(9-5)], 'returnType' => $this->semStack[$stackPos-(9-7)], 'expr' => $this->semStack[$stackPos-(9-9)], 'attrGroups' => $this->semStack[$stackPos-(9-1)]], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);
            },
            442 => function ($stackPos) {
                 $this->semValue = new Expr\ArrowFunction(['static' => true, 'byRef' => $this->semStack[$stackPos-(10-4)], 'params' => $this->semStack[$stackPos-(10-6)], 'returnType' => $this->semStack[$stackPos-(10-8)], 'expr' => $this->semStack[$stackPos-(10-10)], 'attrGroups' => $this->semStack[$stackPos-(10-1)]], $this->startAttributeStack[$stackPos-(10-1)] + $this->endAttributes);
            },
            443 => function ($stackPos) {
                 $this->semValue = new Expr\Closure(['static' => false, 'byRef' => $this->semStack[$stackPos-(9-3)], 'params' => $this->semStack[$stackPos-(9-5)], 'uses' => $this->semStack[$stackPos-(9-7)], 'returnType' => $this->semStack[$stackPos-(9-8)], 'stmts' => $this->semStack[$stackPos-(9-9)], 'attrGroups' => $this->semStack[$stackPos-(9-1)]], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);
            },
            444 => function ($stackPos) {
                 $this->semValue = new Expr\Closure(['static' => true, 'byRef' => $this->semStack[$stackPos-(10-4)], 'params' => $this->semStack[$stackPos-(10-6)], 'uses' => $this->semStack[$stackPos-(10-8)], 'returnType' => $this->semStack[$stackPos-(10-9)], 'stmts' => $this->semStack[$stackPos-(10-10)], 'attrGroups' => $this->semStack[$stackPos-(10-1)]], $this->startAttributeStack[$stackPos-(10-1)] + $this->endAttributes);
            },
            445 => function ($stackPos) {
                 $this->semValue = array(new Stmt\Class_(null, ['type' => 0, 'extends' => $this->semStack[$stackPos-(8-4)], 'implements' => $this->semStack[$stackPos-(8-5)], 'stmts' => $this->semStack[$stackPos-(8-7)], 'attrGroups' => $this->semStack[$stackPos-(8-1)]], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes), $this->semStack[$stackPos-(8-3)]);
            $this->checkClass($this->semValue[0], -1);
            },
            446 => function ($stackPos) {
                 $this->semValue = new Expr\New_($this->semStack[$stackPos-(3-2)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            447 => function ($stackPos) {
                 list($class, $ctorArgs) = $this->semStack[$stackPos-(2-2)]; $this->semValue = new Expr\New_($class, $ctorArgs, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            448 => function ($stackPos) {
                 $this->semValue = array();
            },
            449 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(4-3)];
            },
            450 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            451 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
            },
            452 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
            },
            453 => function ($stackPos) {
                 $this->semValue = new Expr\ClosureUse($this->semStack[$stackPos-(2-2)], $this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            454 => function ($stackPos) {
                 $this->semValue = new Expr\FuncCall($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            455 => function ($stackPos) {
                 $this->semValue = new Expr\FuncCall($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            456 => function ($stackPos) {
                 $this->semValue = new Expr\StaticCall($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            457 => function ($stackPos) {
                 $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            458 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            459 => function ($stackPos) {
                 $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            460 => function ($stackPos) {
                 $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            461 => function ($stackPos) {
                 $this->semValue = new Name\FullyQualified(substr($this->semStack[$stackPos-(1-1)], 1), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            462 => function ($stackPos) {
                 $this->semValue = new Name\Relative(substr($this->semStack[$stackPos-(1-1)], 10), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            463 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            464 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            465 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(3-2)];
            },
            466 => function ($stackPos) {
                 $this->semValue = new Expr\Error($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); $this->errorState = 2;
            },
            467 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            468 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            469 => function ($stackPos) {
                 $this->semValue = null;
            },
            470 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(3-2)];
            },
            471 => function ($stackPos) {
                 $this->semValue = array();
            },
            472 => function ($stackPos) {
                 $this->semValue = array(new Scalar\EncapsedStringPart(Scalar\String_::parseEscapeSequences($this->semStack[$stackPos-(1-1)], '`'), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes));
            },
            473 => function ($stackPos) {
                 foreach ($this->semStack[$stackPos-(1-1)] as $s) { if ($s instanceof Node\Scalar\EncapsedStringPart) { $s->value = Node\Scalar\String_::parseEscapeSequences($s->value, '`', true); } }; $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            474 => function ($stackPos) {
                 $this->semValue = array();
            },
            475 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            476 => function ($stackPos) {
                 $this->semValue = new Expr\ConstFetch($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            477 => function ($stackPos) {
                 $this->semValue = new Scalar\MagicConst\Line($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            478 => function ($stackPos) {
                 $this->semValue = new Scalar\MagicConst\File($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            479 => function ($stackPos) {
                 $this->semValue = new Scalar\MagicConst\Dir($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            480 => function ($stackPos) {
                 $this->semValue = new Scalar\MagicConst\Class_($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            481 => function ($stackPos) {
                 $this->semValue = new Scalar\MagicConst\Trait_($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            482 => function ($stackPos) {
                 $this->semValue = new Scalar\MagicConst\Method($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            483 => function ($stackPos) {
                 $this->semValue = new Scalar\MagicConst\Function_($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            484 => function ($stackPos) {
                 $this->semValue = new Scalar\MagicConst\Namespace_($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            485 => function ($stackPos) {
                 $this->semValue = new Expr\ClassConstFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            486 => function ($stackPos) {
                 $this->semValue = new Expr\ClassConstFetch($this->semStack[$stackPos-(3-1)], new Expr\Error($this->startAttributeStack[$stackPos-(3-3)] + $this->endAttributeStack[$stackPos-(3-3)]), $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); $this->errorState = 2;
            },
            487 => function ($stackPos) {
                 $attrs = $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes; $attrs['kind'] = Expr\Array_::KIND_SHORT;
            $this->semValue = new Expr\Array_($this->semStack[$stackPos-(3-2)], $attrs);
            },
            488 => function ($stackPos) {
                 $attrs = $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes; $attrs['kind'] = Expr\Array_::KIND_LONG;
            $this->semValue = new Expr\Array_($this->semStack[$stackPos-(4-3)], $attrs);
            },
            489 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            490 => function ($stackPos) {
                 $attrs = $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes; $attrs['kind'] = ($this->semStack[$stackPos-(1-1)][0] === "'" || ($this->semStack[$stackPos-(1-1)][1] === "'" && ($this->semStack[$stackPos-(1-1)][0] === 'b' || $this->semStack[$stackPos-(1-1)][0] === 'B')) ? Scalar\String_::KIND_SINGLE_QUOTED : Scalar\String_::KIND_DOUBLE_QUOTED);
            $this->semValue = new Scalar\String_(Scalar\String_::parse($this->semStack[$stackPos-(1-1)]), $attrs);
            },
            491 => function ($stackPos) {
                 $attrs = $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes; $attrs['kind'] = Scalar\String_::KIND_DOUBLE_QUOTED;
            foreach ($this->semStack[$stackPos-(3-2)] as $s) { if ($s instanceof Node\Scalar\EncapsedStringPart) { $s->value = Node\Scalar\String_::parseEscapeSequences($s->value, '"', true); } }; $this->semValue = new Scalar\Encapsed($this->semStack[$stackPos-(3-2)], $attrs);
            },
            492 => function ($stackPos) {
                 $this->semValue = $this->parseLNumber($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            493 => function ($stackPos) {
                 $this->semValue = new Scalar\DNumber(Scalar\DNumber::parse($this->semStack[$stackPos-(1-1)]), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            494 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            495 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            496 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            497 => function ($stackPos) {
                 $this->semValue = $this->parseDocString($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-2)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes, $this->startAttributeStack[$stackPos-(3-3)] + $this->endAttributeStack[$stackPos-(3-3)], true);
            },
            498 => function ($stackPos) {
                 $this->semValue = $this->parseDocString($this->semStack[$stackPos-(2-1)], '', $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes, $this->startAttributeStack[$stackPos-(2-2)] + $this->endAttributeStack[$stackPos-(2-2)], true);
            },
            499 => function ($stackPos) {
                 $this->semValue = $this->parseDocString($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-2)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes, $this->startAttributeStack[$stackPos-(3-3)] + $this->endAttributeStack[$stackPos-(3-3)], true);
            },
            500 => function ($stackPos) {
                 $this->semValue = null;
            },
            501 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            502 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            503 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(3-2)];
            },
            504 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            505 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            506 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            507 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            508 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            509 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(3-2)];
            },
            510 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            511 => function ($stackPos) {
                 $this->semValue = new Expr\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            512 => function ($stackPos) {
                 $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            513 => function ($stackPos) {
                 $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            514 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            515 => function ($stackPos) {
                 $this->semValue = new Expr\MethodCall($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            516 => function ($stackPos) {
                 $this->semValue = new Expr\NullsafeMethodCall($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            517 => function ($stackPos) {
                 $this->semValue = null;
            },
            518 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            519 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            520 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            521 => function ($stackPos) {
                 $this->semValue = new Expr\PropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            522 => function ($stackPos) {
                 $this->semValue = new Expr\NullsafePropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            523 => function ($stackPos) {
                 $this->semValue = substr($this->semStack[$stackPos-(1-1)], 1);
            },
            524 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(4-3)];
            },
            525 => function ($stackPos) {
                 $this->semValue = new Expr\Variable($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            526 => function ($stackPos) {
                 $this->semValue = new Expr\Error($this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); $this->errorState = 2;
            },
            527 => function ($stackPos) {
                 $var = $this->semStack[$stackPos-(1-1)]; $this->semValue = \is_string($var) ? new Node\VarLikeIdentifier($var, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes) : $var;
            },
            528 => function ($stackPos) {
                 $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            529 => function ($stackPos) {
                 $this->semValue = new Expr\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            530 => function ($stackPos) {
                 $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            531 => function ($stackPos) {
                 $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            532 => function ($stackPos) {
                 $this->semValue = new Expr\PropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            533 => function ($stackPos) {
                 $this->semValue = new Expr\NullsafePropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            534 => function ($stackPos) {
                 $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            535 => function ($stackPos) {
                 $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            536 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            537 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(3-2)];
            },
            538 => function ($stackPos) {
                 $this->semValue = new Expr\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            539 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            540 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(3-2)];
            },
            541 => function ($stackPos) {
                 $this->semValue = new Expr\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            542 => function ($stackPos) {
                 $this->semValue = new Expr\Error($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); $this->errorState = 2;
            },
            543 => function ($stackPos) {
                 $this->semValue = new Expr\List_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            544 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)]; $end = count($this->semValue)-1; if ($this->semValue[$end] === null) array_pop($this->semValue);
            },
            545 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            546 => function ($stackPos) {
                 /* do nothing -- prevent default action of $$=$this->semStack[$1]. See $551. */
            },
            547 => function ($stackPos) {
                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
            },
            548 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
            },
            549 => function ($stackPos) {
                 $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(1-1)], null, false, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            550 => function ($stackPos) {
                 $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(2-2)], null, true, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            551 => function ($stackPos) {
                 $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(1-1)], null, false, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            552 => function ($stackPos) {
                 $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(3-3)], $this->semStack[$stackPos-(3-1)], false, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            553 => function ($stackPos) {
                 $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(4-4)], $this->semStack[$stackPos-(4-1)], true, $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            554 => function ($stackPos) {
                 $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(3-3)], $this->semStack[$stackPos-(3-1)], false, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            555 => function ($stackPos) {
                 $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(2-2)], null, false, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes, true, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            556 => function ($stackPos) {
                 $this->semValue = null;
            },
            557 => function ($stackPos) {
                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            558 => function ($stackPos) {
                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
            },
            559 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
            },
            560 => function ($stackPos) {
                 $this->semValue = array($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)]);
            },
            561 => function ($stackPos) {
                 $this->semValue = new Scalar\EncapsedStringPart($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            562 => function ($stackPos) {
                 $this->semValue = new Expr\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            563 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
            564 => function ($stackPos) {
                 $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
            },
            565 => function ($stackPos) {
                 $this->semValue = new Expr\PropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            566 => function ($stackPos) {
                 $this->semValue = new Expr\NullsafePropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            567 => function ($stackPos) {
                 $this->semValue = new Expr\Variable($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            568 => function ($stackPos) {
                 $this->semValue = new Expr\Variable($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
            },
            569 => function ($stackPos) {
                 $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(6-2)], $this->semStack[$stackPos-(6-4)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);
            },
            570 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(3-2)];
            },
            571 => function ($stackPos) {
                 $this->semValue = new Scalar\String_($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            572 => function ($stackPos) {
                 $this->semValue = $this->parseNumString($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
            },
            573 => function ($stackPos) {
                 $this->semValue = $this->parseNumString('-' . $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
            },
            574 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos-(1-1)];
            },
        ];
    }
}
